package com.gewara.web.action.api2mobile;import java.io.ByteArrayInputStream;import java.sql.Timestamp;import java.util.ArrayList;import java.util.List;import org.apache.commons.codec.binary.Hex;import org.apache.commons.lang.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.web.bind.annotation.RequestMapping;import com.gewara.constant.ApiConstant;import com.gewara.constant.PointConstant;import com.gewara.constant.TagConstant;import com.gewara.json.MemberSign;import com.gewara.model.acl.GewaraUser;import com.gewara.model.common.City;import com.gewara.model.common.County;import com.gewara.model.common.Province;import com.gewara.model.content.Picture;import com.gewara.model.pay.MemberAccount;import com.gewara.model.pay.SportOrder;import com.gewara.model.user.Jobs;import com.gewara.model.user.Member;import com.gewara.model.user.MemberInfo;import com.gewara.model.user.Point;import com.gewara.model.user.Treasure;import com.gewara.service.bbs.BlogService;import com.gewara.service.member.PointService;import com.gewara.service.sport.SportOrderService;import com.gewara.support.ErrorCode;import com.gewara.support.ServiceHelper;import com.gewara.untrans.GewaPicService;import com.gewara.untrans.MemberCountService;import com.gewara.untrans.WalaApiService;import com.gewara.untrans.activity.SynchActivityService;import com.gewara.util.DateUtil;import com.gewara.util.PictureUtil;import com.gewara.util.StringUtil;import com.gewara.web.action.api.ApiAuth;import com.gewara.web.action.api.BaseApiController;import com.gewara.web.filter.NewApiAuthenticationFilter;import com.gewara.xmlbind.activity.RemoteActivity;import com.gewara.xmlbind.bbs.Comment;import com.gewara.xmlbind.bbs.ReComment;/** * 哇啦 * @author taiqichao * */@Controllerpublic class Api2MobileCommentController extends BaseApiController {	@Autowired@Qualifier("memberCountService")	private MemberCountService memberCountService;	@Autowired@Qualifier("walaApiService")	private WalaApiService walaApiService;		@Autowired	@Qualifier("blogService")	private BlogService blogService;		@Autowired	@Qualifier("gewaPicService")	private GewaPicService gewaPicService;		@Autowired	@Qualifier("pointService")	private PointService pointService;		@Autowired	@Qualifier("sportOrderService")	private SportOrderService sportOrderService;		@Autowired@	Qualifier("synchActivityService")	private SynchActivityService synchActivityService;		/**	 * 我发表的哇啦(我的哇啦)	 */	@RequestMapping("/api2/mobile/userCommentList.xhtml")	public String userCommentList(ModelMap model){		return notSupport(model);	}		/**	 * 同一场馆（广场）	 */	@RequestMapping("/api2/mobile/placeCommentList.xhtml")	public String getCommentList(ModelMap model){		return notSupport(model);	}				/**	 * <pre>@提到我的</pre>(我的哇啦)	 */	@RequestMapping("/api2/mobile/mentionMe.xhtml")	public String mentionMe(ModelMap model){		return notSupport(model);	}			/**	 * 评论(别人回复我的)（我的哇啦）	 */	@RequestMapping("/api2/mobile/receiveCommentList.xhtml")	public String receiveCommentList(ModelMap model){		return notSupport(model);	}		/**	 *  哇啦详情	 */	@RequestMapping("/api2/mobile/comment.xhtml")	public String comment(ModelMap model){		return notSupport(model);	}	/**	 * 回复哇啦的列表	 */	@RequestMapping("/api2/mobile/reCommentList.xhtml")	public String reCommentList(Long commentid, Integer from, Integer maxnum, ModelMap model){		if(commentid==null) return getErrorXmlView(model, ApiConstant.CODE_PARAM_ERROR, "invalid commentid");		if(from == null) from =0;		if(maxnum == null || maxnum>100) maxnum = 10;		List<ReComment> reCommentList = walaApiService.getReCommentByRelatedidAndTomemberid(commentid, null, null, from, maxnum);		Integer reCommentCount = walaApiService.getReCommentCountByRelatedidAndTomemberid(commentid, null, null);		model.put("reCommentCount", reCommentCount);		model.put("reCommentList", reCommentList);		addCacheMember(model, ServiceHelper.getMemberIdListFromBeanList(reCommentList));		return getXmlView(model, "api/mobile/reCommentList.vm");	}	/**	 * 我的关注（广场）	 */	@RequestMapping("/api2/mobile/collectCommentList.xhtml")	public String myAttentionInfo(ModelMap model){		return notSupport(model);	}		/**	 * 用户信息	 * 	 */	@RequestMapping("/api2/mobile/memberInfo.xhtml")	public String memberInfo(String memberEncode, Long memberid, String nickname, ModelMap model){		//FIXME:分成登录和未登录用户		Member member = null;		Member myMember = null;		if(StringUtils.isNotBlank(memberEncode)){			myMember = memberService.getMemberByEncode(memberEncode);		}		if(memberid != null){			member = daoService.getObject(Member.class, memberid);		}else if(StringUtils.isNotBlank(nickname)){			member = memberService.getMemberByNickname(nickname);		}else if(myMember!=null){			member = daoService.getObject(Member.class, myMember.getId());		}		if((StringUtils.isNotBlank(memberEncode) && myMember == null) || member==null) return getErrorXmlView(model, ApiConstant.CODE_MEMBER_NOT_EXISTS, "用户不存在！");				Long myMemberId = myMember != null ? myMember.getId():null;		Long otherMemberId = member.getId();		MemberInfo memberInfo = daoService.getObject(MemberInfo.class, otherMemberId);		//是否关注		boolean iscollect = false;		boolean isMySelf = false;		if(otherMemberId.equals(myMemberId)){			iscollect = true;			isMySelf = true;			MemberAccount memberAccount = daoService.getObjectByUkey(MemberAccount.class, "memberid", memberid, false);			model.put("banlance", memberAccount==null?0:memberAccount.getBanlance());			//账户金额			model.put("bankcharge", memberAccount==null?0:memberAccount.getBankcharge());			//瓦币信息 			model.put("wabi", memberAccount==null?0:memberAccount.getOthercharge());			model.put("realname", memberAccount==null?"":memberAccount.getRealname());			//账户信息完整性			if (memberAccount == null || memberAccount.isNopassword()) {				model.put("accountintegrity", false);			}else{				model.put("accountintegrity", true);			}		}else{			iscollect = blogService.isTreasureMember(myMemberId, otherMemberId);		}		//判断用户生日格式		if(memberInfo.getBirthday()==null||!DateUtil.isValidDate((memberInfo.getBirthday()+""))){			memberInfo.setBirthday("");		}		model.put("iscollect", iscollect?1:0);		model.put("member", member);		model.put("memberInfo", memberInfo);		//职位		Jobs jobs = memberService.getMemberPosition(memberInfo.getExpvalue());		model.put("position", jobs.getPosition());		City city = daoService.getObject(City.class, memberInfo.getLivecity());		County county = daoService.getObject(County.class, memberInfo.getLivecounty());		Province province = daoService.getObject(Province.class, memberInfo.getLiveprovince());		if(city != null) model.put("cityname", city.getCityname());		if(county != null) model.put("countyname", county.getCountyname());		if(province != null) model.put("provincename", province.getProvincename());		Integer treasureCount = blogService.getTreasureCountByMemberId(otherMemberId, new String[]{"member"}, null, Treasure.ACTION_COLLECT);		Integer fansCount = memberCountService.getFansCountByMemberId(otherMemberId);		Integer treasureBarCount = 0;		Integer treasureActCount = blogService.getTreasureCountByMemberId(otherMemberId, new String[]{TagConstant.TAG_ACTIVITY}, null, Treasure.ACTION_COLLECT);		model.put("treasureBarCount", treasureBarCount);		model.put("treasureActCount", treasureActCount);		model.put("treasureCount", treasureCount);		model.put("fansCount", fansCount);		model.put("isMySelf", isMySelf);		List<Point> todayPointList = pointService.getPointListByMemberid(member.getId(), PointConstant.TAG_LOGIN_ACTIVIRY, DateUtil.getBeginningTimeOfDay(new Timestamp(System.currentTimeMillis())), null, null, 0, 1);		if(todayPointList.isEmpty()){			model.put("pointstatus", 0);		}else{			model.put("pointstatus", 1);		}		//添加图片数量和足迹数量		List<Comment> commList = commentService.getCommentListByMemberid(otherMemberId, 0, 0);		int picCount = 0;		for (Comment comment : commList) {			if(comment.getPicturename() != null&&StringUtils.isNotBlank(comment.getPicturename())) picCount++;		}		model.put("picCount", picCount);		List<Long> sportidList = new ArrayList<Long>();		//我订过票的场馆		List<SportOrder> orderList = sportOrderService.getOrderListByMemberid(otherMemberId);		for (SportOrder sportOrder : orderList) {			if(!(sportidList.contains(sportOrder.getSportid()))){				sportidList.add(sportOrder.getSportid());			}		}		//我在运动里发表的哇啦		List<Comment> commLists = commentService.getCommentListByTags(new String[]{"sport"}, otherMemberId, true, 0, 0);		for (Comment comment : commLists) {			if(!sportidList.contains(comment.getRelatedid())&&comment.getRelatedid()!=null) sportidList.add(comment.getRelatedid());		}		//我发表关联运动的活动		List<RemoteActivity> activityList = null;		ErrorCode<List<RemoteActivity>> code = synchActivityService.getMemberActivityListByMemberid(otherMemberId, null, RemoteActivity.TIME_ALL, "sport", null, 0, 0);		if(code.isSuccess()) { 			activityList = code.getRetval();			for (RemoteActivity remoteActivity : activityList) {				if(!sportidList.contains(remoteActivity.getRelatedid())&&remoteActivity.getRelatedid()!=null) sportidList.add(remoteActivity.getRelatedid());			}		}		model.put("zjCount", sportidList.size());		return getXmlView(model, "api2/mobile/memberInfo.vm");	}			/**	 * 附近用户(地图)	 */	@RequestMapping("/api2/mobile/nearUserList.xhtml")	public String nearUserList(ModelMap model){		return notSupport(model);	}		/**	 * 附近用户哇啦（广场）	 * @param key	 * @param encryptCode	 * @param memberEncode	 * @param pointx	 * @param pointy	 * @param R	 * @param from	 * @param maxnum	 * @param model	 * @return	 */	@RequestMapping("/api2/mobile/nearUserCommentList.xhtml")	public String nearUserCommentList(ModelMap model){		return notSupport(model);	}			/**	 * 关注列表	 */	@RequestMapping("/api2/mobile/collectList.xhtml")	public String collectList(ModelMap model){		return notSupport(model);	}	/**	 * 我的粉丝	 */	@RequestMapping("/api2/mobile/fansList.xhtml")	public String myFansInfo(ModelMap model){		return notSupport(model);	}			/**	 * 回复哇啦	 */	@RequestMapping("/api2/mobile/reCommentAdd.xhtml")	public String reCommentAdd(ModelMap model){		return notSupport(model);	}		/**	 * 哇啦列表	 */	@RequestMapping("/api2/mobile/commentList.xhtml")	public String commentList(String tag, Long relatedid, String type, String haveface, Integer from, Integer maxnum, ModelMap model){		if(from == null) from = 0;		if(maxnum == null || maxnum>100) maxnum = 10;		List<Comment> commentList = null;		if(StringUtils.isNotBlank(tag)){			if(relatedid == null) return getErrorXmlView(model, ApiConstant.CODE_DATA_ERROR,"关联ID不能为空！");			commentList = commentService.getCommentListByRelatedId(tag,null, relatedid, null, from, maxnum);			if(StringUtils.equals(type, "hot")){ //预留				commentList = new ArrayList<Comment>();			}else {				commentList = commentService.getCommentListByRelatedId(tag,null, relatedid, null, from, maxnum);			}		}else{			return getErrorXmlView(model, ApiConstant.CODE_DATA_ERROR, "参数错误!");		}		if(!commentList.isEmpty()){			getCommCommentData(model, commentList, haveface);		}		return getXmlView(model, "api2/comment/commentList.vm");	}		/**	 * 发表哇啦(带图片)	 */	@RequestMapping("/api2/mobile/commentAdd.xhtml")	public String commentAdd(String memberEncode,String apptype,			String body, String tag, Long relatedid, String pic,String filetype, 			Long transferid,Integer markvalue, ModelMap model){		ApiAuth auth = NewApiAuthenticationFilter.getApiAuth();		String path = "images/comment/";		if(memberEncode==null||body==null||tag == null)  return getErrorXmlView(model, ApiConstant.CODE_PARAM_ERROR, "传递参数错误！");		Member member = memberService.getMemberByEncode(memberEncode);		if(member == null) return getErrorXmlView(model, ApiConstant.CODE_MEMBER_NOT_EXISTS, "用户不存在！");		if(StringUtils.isBlank(tag)) return getErrorXmlView(model, ApiConstant.CODE_PARAM_ERROR, "tag不能为空！");		String address = auth.getApiUser().getBriefname();		String filepath = "";		if(markvalue != null && markvalue >10 && markvalue <= 20) {			//兼容手机客户端电影应用,客户端*2			markvalue = markvalue/2;		}		if(pic!=null && transferid == null){//转载不支持图片			if(StringUtils.isBlank(filetype)) return getErrorXmlView(model, ApiConstant.CODE_PARAM_ERROR, "传递参数错误！");			try {				ByteArrayInputStream is = new ByteArrayInputStream(Hex.decodeHex(pic.toCharArray()));				String filename = gewaPicService.saveToTempPic(is, filetype);				if(StringUtils.isNotBlank(filename)){					if(!PictureUtil.isValidPicType(StringUtil.getFilenameExtension(filename))) {						return getErrorXmlView(model, ApiConstant.CODE_DATA_ERROR, "发表哇啦图片格式不合法！只支持jpg,png,gif,jpeg格式");					}					gewaPicService.saveTempFileToRemote(filename);					gewaPicService.moveRemoteTempTo(member.getId(), tag, relatedid, path, filename);					filepath = path+filename;					body += "<img src=\""+filepath+"\"/>";				}			} catch (Exception e) {				return getErrorXmlView(model, ApiConstant.CODE_PARAM_ERROR, "图片错误！");			}		}		String pointx = null;		String pointy = null;		MemberSign sign = nosqlService.getMemberSign(member.getId());		if(sign != null){			pointx = Double.toString(sign.getPointx());			pointy = Double.toString(sign.getPointy());		}		apptype = StringUtils.isBlank(apptype)? TagConstant.TAG_CINEMA : apptype;		ErrorCode<Comment> result = commentService.addMicroComment(member, tag, relatedid, body, null, address, transferid, false, markvalue, null, pointx, pointy, null, apptype);		if(result.isSuccess()) {			//shareService.sendShareInfo("wala",result.getRetval().getId(), result.getRetval().getMemberid(), null);			if(markvalue != null){				try {					markService.saveOrUpdateMemberMark(tag, relatedid, "generalmark", markvalue, member); 				}catch (Exception e) {					return getErrorXmlView(model, ApiConstant.CODE_PARAM_ERROR, e.getMessage());				}			}			if(StringUtils.equals(TagConstant.TAG_ACTIVITY, tag) && StringUtils.isNotBlank(pic) ){//手机客户端酒吧活动发表带图片的哇啦-把图片转存到关联活动下				Picture picture = new Picture(tag,relatedid,member.getId(),filepath);				picture.setMemberType(GewaraUser.USER_TYPE_MEMBER);				daoService.addObject(picture);			}			return getSingleResultXmlView(model, result.getRetval().getId()+"");		}else{			return getErrorXmlView(model, ApiConstant.CODE_DATA_ERROR, result.getMsg());		}	}		@RequestMapping("/api2/mobile/getAgenadaListByActionid.xhtml")	public String getAgenadaListByActionid(ModelMap model){		return notSupport(model);	}	}