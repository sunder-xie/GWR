package com.gewara.web.action.api2mobile;import java.sql.Timestamp;import java.util.ArrayList;import java.util.Arrays;import java.util.Date;import java.util.HashMap;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Set;import java.util.regex.Pattern;import org.apache.commons.collections.CollectionUtils;import org.apache.commons.lang.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.web.bind.annotation.RequestMapping;import com.gewara.command.SearchCinemaCommand;import com.gewara.constant.AdminCityContant;import com.gewara.constant.ApiConstant;import com.gewara.constant.DiaryConstant;import com.gewara.constant.Flag;import com.gewara.constant.TagConstant;import com.gewara.constant.content.SignName;import com.gewara.constant.ticket.OpiConstant;import com.gewara.helper.ticket.CloseRuleOpiFilter;import com.gewara.helper.ticket.OpiFilter;import com.gewara.json.mobile.MobileGrabTicketEvent;import com.gewara.json.mobile.MobileGrabTicketMpi;import com.gewara.model.api.ApiUser;import com.gewara.model.bbs.Diary;import com.gewara.model.common.BaseEntity;import com.gewara.model.common.County;import com.gewara.model.content.GewaCommend;import com.gewara.model.content.Picture;import com.gewara.model.movie.Cinema;import com.gewara.model.movie.CinemaProfile;import com.gewara.model.movie.CinemaRoom;import com.gewara.model.movie.CityPrice;import com.gewara.model.movie.Movie;import com.gewara.model.movie.MoviePlayItem;import com.gewara.model.movie.MovieVideo;import com.gewara.model.partner.PartnerCloseRule;import com.gewara.model.ticket.OpenPlayItem;import com.gewara.model.user.Member;import com.gewara.model.user.Treasure;import com.gewara.service.bbs.BlogService;import com.gewara.service.bbs.DiaryService;import com.gewara.service.content.VideoService;import com.gewara.service.member.TreasureService;import com.gewara.service.movie.MCPService;import com.gewara.service.order.OrderQueryService;import com.gewara.service.partner.PartnerService;import com.gewara.service.ticket.MoviePriceService;import com.gewara.service.ticket.OpenPlayService;import com.gewara.support.ErrorCode;import com.gewara.untrans.CommonService;import com.gewara.util.BeanUtil;import com.gewara.util.DateUtil;import com.gewara.util.JsonUtils;import com.gewara.util.LongitudeAndLatitude;import com.gewara.util.MarkHelper;import com.gewara.util.OuterSorter;import com.gewara.util.VmUtils;import com.gewara.web.action.api.ApiAuth;import com.gewara.web.action.api.BaseApiController;import com.gewara.web.filter.NewApiAuthenticationFilter;import com.mongodb.BasicDBObject;import com.mongodb.DBObject;@Controllerpublic class Api2MobileController extends BaseApiController {	@Autowired@Qualifier("moviePriceService")	private MoviePriceService moviePriceService;	@Autowired@Qualifier("mcpService")	private MCPService mcpService;	@Autowired@Qualifier("treasureService")	private TreasureService treasureService;	@Autowired@Qualifier("openPlayService")	private OpenPlayService openPlayService;	@Autowired@Qualifier("videoService")	private VideoService videoService;	@Autowired@Qualifier("commonService")	private CommonService commonService;	@Autowired@Qualifier("diaryService")	private DiaryService diaryService;	@Autowired@Qualifier("orderQueryService")	private OrderQueryService orderQueryService;	@Autowired@Qualifier("blogService")	private BlogService blogService;	@Autowired@Qualifier("partnerService")	private PartnerService partnerService;	public void setPartnerService(PartnerService partnerService) {		this.partnerService = partnerService;	}		/**	 * 正在热映电影(图片, 名称, 评分, 已购票人数, 看点)	 * @mark: String pagination, String pageNo, String perPagecount 可不传 表示查询全部	 * @author bob.hu	 * @date 2011-06-02 17:56:11	 * 参数必传，根据citycode分页查询各个城市当前正在上映的影片列表	 */	@RequestMapping("/api2/mobile/getCurHotMovies.xhtml")	public String getCurHotMovies(			String citycode, 			Integer from,			Integer maxnum,			ModelMap model) {		ApiAuth auth = NewApiAuthenticationFilter.getApiAuth();		ApiUser partner = auth.getApiUser();		if (StringUtils.isNotBlank(citycode)) {			if (!partner.supportsCity(citycode))				return getErrorXmlView(model, ApiConstant.CODE_PARTNER_NORIGHTS, "不支持城市" + citycode);		} else {			citycode = partner.getDefaultCity();		}		if(from == null){			from = 0;		}		if(maxnum == null){			maxnum = 30;		}		if(maxnum>100){			maxnum=100;		}		List<Movie> movieList = mcpService.getOpenMovieList(citycode);		if(movieList.isEmpty()) {			movieList = mcpService.getCurMovieListByMpiCount(citycode, from, maxnum);		}		mcpService.sortTodayMoviesByMpiCount(citycode, movieList);		String signName = SignName.INDEX_MOVIELIST;		if(StringUtils.equals(AdminCityContant.CITYCODE_SH, citycode)){			signName = SignName.INDEX_MOVIELIST_NEW;		}		List<GewaCommend> gcMovieList = commonService.getGewaCommendList(citycode, signName, null, null, true, 0, 13);		List<Movie> newMovieList = new ArrayList<Movie>();		for(GewaCommend commend : gcMovieList){			if(commend.getRelatedid()!=null) {				Movie movie = daoService.getObject(Movie.class, commend.getRelatedid());				if(movie!=null){					movieList.remove(movie);					newMovieList.add(movie);				}			}		}		newMovieList.addAll(movieList);		newMovieList = BeanUtil.getSubList(newMovieList, from, maxnum);		List<Map> dataMap = BeanUtil.getBeanMapList(newMovieList, "id", "limg", "moviename", "generalmark", "boughtcount", 				"highlight","releasedate","director","actors","clickedtimes","edition");		model.put("dataMap", dataMap);		model.put("generalmarkMap", getMovieMarkMap(newMovieList));				Map<Long, Long> diffReleaseMap=new HashMap<Long, Long>();		Map<Long, Integer> cinemaCountMap=new HashMap<Long, Integer>();		Map<Long, Integer> playItemCountMap=new HashMap<Long, Integer>();		Map<Long, String> movieVideoMap=new HashMap<Long, String>();		if(newMovieList!=null) {			List<PartnerCloseRule> pcrList = partnerService.getCloseRuleList();			CloseRuleOpiFilter filter = new CloseRuleOpiFilter(partner, pcrList);			filter.filterMovie(newMovieList);		}		for(Movie movie:newMovieList){			//距离上映日期天数			Timestamp cur = new Timestamp(System.currentTimeMillis());			long diff =0;			if( null!=movie.getReleasedate()){				diff= movie.getReleasedate().getTime()-cur.getTime();				diff=Math.round((diff/1000)/(3600*24));			}			diffReleaseMap.put(movie.getId(), diff);						CityPrice cityPrice = moviePriceService.getCityPrice(movie.getId(), citycode, TagConstant.TAG_MOVIE);			if(cityPrice != null){				//播放影片影院数量				cinemaCountMap.put(movie.getId(),cityPrice.getCquantity());				//影片排片数量				playItemCountMap.put(movie.getId(), cityPrice.getQuantity());			}			//预告片			MovieVideo mv = videoService.getMovieVideo(movie.getId());			if (null!=mv){				movieVideoMap.put(movie.getId(), mv.getVideoid());			}					}				model.put("diffReleaseMap", diffReleaseMap);		model.put("cinemaCountMap", cinemaCountMap);		model.put("playItemCountMap", playItemCountMap);		model.put("movieVideoMap", movieVideoMap);		return getXmlView(model, "api2/movie/movie/curHotMovie.vm");	}		/**	 * 影片信息	 * @author shusong.liu	 * 参数必传	 */	@RequestMapping("/api2/mobile/movieDetail.xhtml")	public String movieDetail(Long movieid, ModelMap model, String memberEncode, String citycode) {		if (movieid == null) return getErrorXmlView(model, ApiConstant.CODE_PARAM_ERROR, "缺少必要参数！");		Movie movie = daoService.getObject(Movie.class, movieid);		if(movie == null) return getErrorXmlView(model, ApiConstant.CODE_PARAM_ERROR, "未找到此电影！");		model.put("movie", movie);		List<String> picList = pictureService.getSinglePictureListByRelatedid("movie", movieid, 0, 40);		model.put("picList", picList);		Treasure treasure = null;		if (StringUtils.isNotBlank(memberEncode)) {			Member member = memberService.getMemberByEncode(memberEncode);			if (member != null) {				treasure = treasureService.getTreasureByTagMemberidRelatedid(TagConstant.TAG_MOVIE, member.getId(), movieid, Treasure.ACTION_COLLECT);			} else				return getErrorXmlView(model, ApiConstant.CODE_DATA_ERROR, "用户不存在！");		}		model.put("iscollect", treasure == null ? 0 : 1);		MovieVideo mv = videoService.getMovieVideo(movieid);		if (mv != null)			model.put("videoid", mv.getVideoid());		// 影评		List<Diary> diaryList = diaryService.getDiaryList(Diary.class, null, DiaryConstant.DIARY_TYPE_COMMENT, TagConstant.TAG_MOVIE, movieid, 0, 1, "flowernum");		if (!diaryList.isEmpty()) {			model.put("diaryContent", blogService.getDiaryBody(diaryList.get(0).getId()));		}		model.put("generalmark", getMovieMark(movie));		//播放影片影院数量		//cinemaCountMap.put(movie.getId(), mcpService.getPlayCinemaCount(citycode, movie.getId()));		//影片排片数量		//playItemCountMap.put(movie.getId(), mcpService.getMovieCurMpiCount(citycode, movie.getId()));		if(StringUtils.isNotBlank(citycode)){			Integer mpiCount = mcpService.getMovieCurMpiCount(citycode, movieid);			Integer opiCount = openPlayService.getOpiCount(citycode, null, movieid, null, null, true);			model.put("mpi", mpiCount>0);			model.put("opi", opiCount>0);		}		return getXmlView(model, "api2/mobile/movieDetail.vm");	}	public static final String FUTURE_TAG_WEEK = "week";	public static final String FUTURE_TAG_MONTH = "month";	/**	 * 即将上映	 * @mark tag 即将上映类别（一周，一个月，全部）	 * @author shusong.liu	 * @date 2011-06-08	 * 参数必传，tag除外	 * tag：month：查询当月即将上映影片，week：查询本周即将上映影片，为空，查询全部即将上映影片	 */	@RequestMapping("/api2/mobile/futureMovieList.xhtml")	public String futureMovieList(			String citycode,			String tag, 			int from, 			int maxnum, 			ModelMap model) {		List<Movie> movieList = null;		if (maxnum > 100) maxnum = 10;		Date endDate = null;		if (FUTURE_TAG_MONTH.equals(tag)) {			endDate = DateUtil.getMonthLastDay(new Date());		} else if (FUTURE_TAG_WEEK.equals(tag)) {			endDate = DateUtil.getWeekLastDay(new Date());		}		movieList = mcpService.getFutureMovieList(endDate, from, maxnum);		if (!movieList.isEmpty()) {			List<Map> dataMap = BeanUtil.getBeanMapList(movieList, "id", "limg", "moviename","englishname", "generalmark", "length", "director", "actors", "releasedate","clickedtimes","edition","type","language", "playdate");			model.put("dataMap", dataMap);			model.put("generalmarkMap", getGeneralmarkMap(new HashSet<BaseEntity>(movieList)));		}				//是否开放预售		Map<Long, String> openPlayMap=new HashMap<Long, String>();		Map<Long, String> movieVideoMap=new HashMap<Long, String>();				Map<Long, Boolean> mpiMap = new HashMap<Long, Boolean>();		Map<Long, Boolean> opiMap = new HashMap<Long, Boolean>();		ApiAuth auth = NewApiAuthenticationFilter.getApiAuth();		ApiUser partner = auth.getApiUser();		if (StringUtils.isNotBlank(citycode)) {			if (!partner.supportsCity(citycode))				return getErrorXmlView(model, ApiConstant.CODE_PARTNER_NORIGHTS, "不支持城市" + citycode);		} else {			citycode = partner.getDefaultCity();		}		List<Long> curMovieidList = mcpService.getCurMovieIdList(citycode);		for (Movie movie : movieList) {			//预告片			MovieVideo mv = videoService.getMovieVideo(movie.getId());			if (null!=mv){				movieVideoMap.put(movie.getId(), mv.getVideoid());			}			int mpicount = 0;			int opicount = 0;			String tmp = "false";			if(curMovieidList.contains(movie.getId())){				mpicount = mcpService.getMovieCurMpiCount(citycode, movie.getId());				if(mpicount>0){					List<Long> counts=openPlayService.getOpiCinemaidList(citycode,movie.getId());					if(null!=counts&&counts.size()>0){						tmp = "true";						opicount = 1;					}				}			}			openPlayMap.put(movie.getId(), tmp);			mpiMap.put(movie.getId(), mpicount>0?true:false);			opiMap.put(movie.getId(), opicount>0?true:false);		}		model.put("mpiMap", mpiMap);		model.put("opiMap", opiMap);		model.put("openPlayMap", openPlayMap);		model.put("movieVideoMap", movieVideoMap);		return getXmlView(model, "api2/movie/movie/futureMovies.vm");	}	private static final String CINEMA_ALL = "all";// 所有影院	private static final String CINEMA_REGION = "region";// 区域影院	private static final String CINEMA_MYORDER = "order";// 我购票的影院	private static final String CINEMA_NEAR = "near";// 附近影院	private static final String CINEMA_SUBWAY = "subway";// 地铁	private static final String CINEMA_BOOK = "book";// 购票影院		private static final String CINEMA_ORDER_MARK = "mark";// 评分	private static final String CINEMA_ORDER_DISTANCE = "distance";// 距离	private static final String CINEMA_ORDER_CLICKEDTIMES = "clickedtimes";// 关注度	private List<Cinema> getMyCinemaList(Member member, String citycode, String orderField, Double pointx, Double pointy){		List<Cinema> myCinemaList = new ArrayList<Cinema>();		if(member==null) return myCinemaList;		List<Cinema> cinemaList = new ArrayList<Cinema>();		if(member!=null) { 			myCinemaList = orderQueryService.getMemberOrderCinemaList(member.getId(), 4);//我去过的影院			for(Cinema cinema : myCinemaList){				if(StringUtils.equals(cinema.getCitycode(), citycode)) cinemaList.add(cinema);			}		}		if(StringUtils.isNotBlank(orderField) && member!=null && myCinemaList.size() > 0 && pointx !=null && pointy != null) {			cinemaList = getCinemaList(cinemaList, pointx, pointy);		}		return cinemaList;	}	/**	 * @function 当前电影购票影院	 * @author shusong.liu	 * @param countycode	 * @param citycode	 * @param from	 * @param maxnum	 * @param type	 * @param pointx	 * @param pointy	 * @param movieid	 * @param memberEncode	 * @param subwayid:地铁线路	 * @param orderField:排序字段	 * @param playdate:播放日期	 * @param specialfield：特色筛选	 * @deprecated	 */	@RequestMapping("/api2/mobile/cinemaList.xhtml")	public String movieOrderCinema(			String type, 			String pointx, 			String pointy, 			Long movieid, 			String memberEncode, 			String countycode, 			String citycode,			Long subwayid,			String orderField,			Integer from, 			Integer maxnum, 			Date playdate,			String specialfield,			ModelMap model) {		ApiAuth auth = NewApiAuthenticationFilter.getApiAuth();		if (maxnum != null && maxnum > 100) maxnum = 10;		ApiUser partner = auth.getApiUser();		if (StringUtils.isNotBlank(citycode)) {			if (!partner.supportsCity(citycode))				return getErrorXmlView(model, ApiConstant.CODE_PARTNER_NORIGHTS, "不支持城市" + citycode);		} else {			citycode = partner.getDefaultCity();		}		if(playdate == null) playdate = DateUtil.getCurDate();				List<Cinema> cinemaList = null;		Map<String,List<Cinema>> cinemasMap = null;				List<Long> opiCinemaIdList = openPlayService.getOpiCinemaidList(citycode, movieid);		model.put("opiCinemaIdList", opiCinemaIdList);				Member member = null;		if (StringUtils.isNotBlank(memberEncode)){			member=memberService.getMemberByEncode(memberEncode);			if(member==null) return getErrorXmlView(model, ApiConstant.CODE_MEMBER_NOT_EXISTS, "用户不存在！");		}		if(StringUtils.equalsIgnoreCase(pointx, "null")) pointx = "";		if(StringUtils.endsWithIgnoreCase(pointy, "null")) pointy = "";		Double pointxx = null;		if(StringUtils.isNotBlank(pointx)) pointxx = Double.valueOf(pointx);		Double pointyy = null;		if(StringUtils.isNotBlank(pointy)) pointyy = Double.valueOf(pointy);		List<Cinema> myCinemaList = null;		if(StringUtils.isBlank(type)){//默认 我去过的+全部影院（按距离）			List<Cinema> defaultCinemaList=new ArrayList<Cinema>();			if (pointx == null || pointy == null){				return getErrorXmlView(model, ApiConstant.CODE_PARAM_ERROR, "坐标参数传入有误！");			}			List<Cinema> nearCinemaList = cinemaList = mcpService.getCinemaListByCitycode(citycode, 0, 200);			Iterator<Cinema> it = nearCinemaList.iterator();			cinemasMap = new HashMap<String,List<Cinema>>();			List<Cinema> curOpen = new ArrayList<Cinema>();			List<Cinema> curClose = new ArrayList<Cinema>();			while(it.hasNext()){				Cinema cinema = it.next();				if(opiCinemaIdList.contains(cinema.getId())){					curOpen.add(cinema);				}else{					curClose.add(cinema);				}			}			if(movieid != null && StringUtils.isBlank(orderField)){				orderField = CINEMA_ORDER_DISTANCE;			}			cinemasMap.put("curOpen", curOpen);			cinemasMap.put("curClose", curClose);			defaultCinemaList.addAll(nearCinemaList);			//购票			if(member!=null){				if(myCinemaList==null) myCinemaList = getMyCinemaList(member, citycode, orderField, pointxx, pointyy);				for (Cinema cinema : myCinemaList) {					if(!defaultCinemaList.contains(cinema)){						defaultCinemaList.add(cinema);					}				}			}			cinemaList=defaultCinemaList;		}else if (CINEMA_NEAR.equals(type)) {// 附近影院			if (pointx == null || pointy == null) {				return getErrorXmlView(model, ApiConstant.CODE_PARAM_ERROR, "坐标参数传入有误！");			}			cinemaList = mcpService.getNearCinemaList(pointxx, pointyy, 5000, movieid, citycode, playdate);			cinemasMap = new HashMap<String,List<Cinema>>();			List<Cinema> curOpen = new ArrayList<Cinema>();			List<Cinema> curClose = new ArrayList<Cinema>();			OuterSorter sorter = new OuterSorter<Cinema>(false);			for(Cinema cinema:cinemaList){				if(opiCinemaIdList.contains(cinema.getId())){					curOpen.add(cinema);				}else{					curClose.add(cinema);				}			}			cinemaList = sorter.getAscResult();			if(movieid != null && StringUtils.isBlank(orderField)){				orderField = CINEMA_ORDER_DISTANCE;			}			cinemasMap.put("curOpen", curOpen);			cinemasMap.put("curClose", curClose);		} else if (member!=null && CINEMA_MYORDER.equals(type)) {// 我的购票影院			cinemaList = getMyCinemaList(member, citycode, orderField, pointxx, pointyy);			if(myCinemaList==null) myCinemaList = cinemaList;		} else if (CINEMA_ALL.equals(type)) {// 全部影院			if (citycode == null || from == null || maxnum == null) {				return getErrorXmlView(model, ApiConstant.CODE_PARAM_ERROR, "传入参数有误！");			}			List<Long> cinemaIdList = null;			if(movieid != null){				cinemaIdList = mcpService.getPlayCinemaIdList(citycode, movieid, playdate);			}else{				SearchCinemaCommand cmd = searchCinemaCommand(specialfield);				cinemaIdList = mcpService.getCinemaIdListBySearchCmd(cmd, citycode);			}						ErrorCode<Map<String,List<Cinema>>> code = getAllBookCinemaList(cinemaIdList, opiCinemaIdList, specialfield, orderField, pointxx, pointyy);			if (!code.isSuccess()){				return getErrorXmlView(model, ApiConstant.CODE_DATA_ERROR, code.getMsg());			}			cinemasMap = code.getRetval();		} else if (CINEMA_REGION.equals(type)) {// 按区域			if (countycode == null) return getErrorXmlView(model, ApiConstant.CODE_PARAM_ERROR, "传入参数有误！");			List<Long> cinemaIdList = null;			if(movieid != null){				cinemaIdList = mcpService.getPlayCinemaIdListByCountycode(countycode, movieid, playdate);			}else{				SearchCinemaCommand cmd = new SearchCinemaCommand();				cmd.setCountycode(countycode);				cinemaIdList = mcpService.getCinemaIdListBySearchCmd(cmd, citycode);			}			ErrorCode<Map<String,List<Cinema>>> code = getAllBookCinemaList(cinemaIdList, opiCinemaIdList, specialfield, orderField, pointxx, pointyy);			if (!code.isSuccess()){				return getErrorXmlView(model, ApiConstant.CODE_DATA_ERROR, code.getMsg());			}			cinemasMap = code.getRetval();		} else if (CINEMA_SUBWAY.equals(type)) { // 地铁线路			if (subwayid == null) return getErrorXmlView(model, ApiConstant.CODE_PARAM_ERROR, "传入参数有误！");			List<Long> cinemaIdList = null;			SearchCinemaCommand cmd = new SearchCinemaCommand();			cmd.setLineId(subwayid);			cinemaIdList = mcpService.getCinemaIdListBySearchCmd(cmd, citycode);			if(movieid != null){				cinemaIdList = new ArrayList<Long>(CollectionUtils.intersection(cinemaIdList, mcpService.getPlayCinemaIdList(citycode, movieid, playdate)));			}			ErrorCode<Map<String,List<Cinema>>> code = getAllBookCinemaList(cinemaIdList, opiCinemaIdList, specialfield, orderField, pointxx, pointyy);			if (!code.isSuccess()){				return getErrorXmlView(model, ApiConstant.CODE_DATA_ERROR, code.getMsg());			}			cinemasMap = code.getRetval();		} else if (CINEMA_BOOK.equals(type)) {// 购票影院			if(StringUtils.isBlank(orderField)){				orderField = CINEMA_ORDER_CLICKEDTIMES;			}			ErrorCode<Map<String,List<Cinema>>> code = getAllBookCinemaList(opiCinemaIdList, opiCinemaIdList, specialfield, orderField, pointxx, pointyy);			if (!code.isSuccess()){				return getErrorXmlView(model, ApiConstant.CODE_DATA_ERROR, code.getMsg());			}			cinemasMap = code.getRetval();		}				Map<Long,Map/*placePriceBean*/> placePriceMap = new HashMap<Long,Map>();//价格区间		Map<Long,Integer> countMap = new HashMap<Long,Integer>();//剩余场次数		Map<Long,Integer> openPlayItemCountMap = new HashMap<Long,Integer>();//上映影片数量		List<Cinema> cinemas = null;		if(CINEMA_MYORDER.equals(type)){			if(cinemaList != null){				cinemas = sortAndSpecialfield(cinemaList, specialfield, movieid, playdate, orderField, placePriceMap, countMap,openPlayItemCountMap, pointxx, pointyy);			}		}else{			if(cinemasMap.get("curOpen") != null){				cinemas = sortAndSpecialfield(cinemasMap.get("curOpen"), specialfield, movieid, playdate, orderField, placePriceMap, countMap, openPlayItemCountMap, pointxx, pointyy);			}			if(cinemasMap.get("curClose") != null){				if(cinemas != null){					cinemas.addAll(sortAndSpecialfield(cinemasMap.get("curClose"), specialfield, movieid, playdate, orderField, placePriceMap, countMap, openPlayItemCountMap, pointxx, pointyy));				}else{					cinemas = sortAndSpecialfield(cinemasMap.get("curClose"), specialfield, movieid, playdate, orderField, placePriceMap, countMap, openPlayItemCountMap, pointxx, pointyy);				}			}			myCinemaList = getSortCinemaList(orderField, myCinemaList, pointxx, pointyy);			//购票的影院排序 order=1			if(myCinemaList != null && member!= null){				int x = 0;				for (Cinema cinema : myCinemaList) {					if(cinemas.contains(cinema)){						cinemas.remove(cinema);						cinemas.add(x, cinema);						x++;					}				}			}			if(cinemas!=null) {				List<PartnerCloseRule> pcrList = partnerService.getCloseRuleList();				CloseRuleOpiFilter filter = new CloseRuleOpiFilter(partner, pcrList);				filter.filterCinema(cinemas);			}			if(from != null && maxnum != null){				cinemas = BeanUtil.getSubList(cinemas,from,maxnum);			}		}		model.put("countMap", countMap);		model.put("cinemaList", cinemas);		model.put("myCinemaList", myCinemaList);		model.put("placePriceMap", placePriceMap);		model.put("openPlayItemCountMap", openPlayItemCountMap);		if(cinemas != null){			Map data = getGeneralmarkMap(new HashSet<BaseEntity>(cinemas));			model.put("generalmarkMap", data);		}		return getXmlView(model, "api2/movie/cinema/cinemaList.vm");	}	private List<Cinema> getSortCinemaList(String orderField, List<Cinema> cinemaList, Double pointx, Double pointy){		if(StringUtils.isBlank(orderField) || cinemaList==null || cinemaList.size()==0) return cinemaList;		List<String> orderList = Arrays.asList(CINEMA_ORDER_MARK, CINEMA_ORDER_CLICKEDTIMES, CINEMA_ORDER_DISTANCE);		OuterSorter sorter = new OuterSorter<Cinema>(false);		if(orderList.contains(orderField)) {			for(Cinema cinema : cinemaList){				if(StringUtils.equalsIgnoreCase(orderField, CINEMA_ORDER_MARK)){					Double point = Double.valueOf(getPlaceGeneralmark(cinema));					sorter.addBean(point, cinema);				}else if(StringUtils.equalsIgnoreCase(orderField, CINEMA_ORDER_CLICKEDTIMES)){					sorter.addBean(cinema.getClickedtimes(), cinema);				}else if(StringUtils.equalsIgnoreCase(orderField, CINEMA_ORDER_DISTANCE) && pointx!=null && pointy!=null){					if(StringUtils.isNotBlank(cinema.getPointx()) && StringUtils.isNotBlank(cinema.getPointy())) {						long value = Math.round(LongitudeAndLatitude.getDistance(pointx, pointy, Double.parseDouble(cinema.getPointx()), Double.parseDouble(cinema.getPointy())));						sorter.addBean(value, cinema);					}else{						sorter.addBean(null, cinema);					}				}			}			if(StringUtils.equalsIgnoreCase(orderField, CINEMA_ORDER_DISTANCE))  {				return sorter.getAscResult();			}			return sorter.getDescResult();		}		return cinemaList;	}		private List<Cinema> getCinemaList(List<Cinema> list, Double pointx, Double pointy){		OuterSorter sorter = new OuterSorter<Cinema>(false);		for(Cinema cinema : list){			if(StringUtils.isNotBlank(cinema.getPointx()) && StringUtils.isNotBlank(cinema.getPointy())){				long value = Math.round(LongitudeAndLatitude.getDistance(pointx, pointy, Double.parseDouble(cinema.getPointx()), Double.parseDouble(cinema.getPointy())));				sorter.addBean(value, cinema);			}else{				sorter.addBean(null, cinema);			}		}		return sorter.getAscResult();	}		private List<Cinema> sortAndSpecialfield(List<Cinema> cinemaList,String specialfield,Long movieid,Date playdate,			String orderField,Map<Long, Map> placePriceMap, Map<Long,Integer> countMap, Map<Long,Integer> openPlayItemCountMap, Double pointx, Double pointy){		OuterSorter sorter = new OuterSorter<Cinema>(false);		for(Cinema cinema:cinemaList){			boolean add = false;			//特色筛选			if(StringUtils.isBlank(specialfield) || specialfield.equals("all") || (cinema.getOtherinfo() != null && cinema.getOtherinfo().indexOf(specialfield) != -1)){				if(movieid != null){					//价格区间					placePriceMap.put(cinema.getId(), moviePriceService.getPlacePriceFromCache("cinema", cinema.getId(), "movie", movieid));					//剩余场次数					int overMap = mcpService.getCinemaMpiCount(cinema.getId(), movieid, playdate);					countMap.put(cinema.getId(), overMap);					if(overMap > 0) add = true;				}else{					int cinemaMpiCount = mcpService.getCinemaMpiCount(cinema.getId(), null, new Date());					if(cinemaMpiCount > 0){						Map pp = moviePriceService.getMinMaxPlacePrice("cinema", cinema.getId());						if(pp!=null) placePriceMap.put(cinema.getId(), pp);						countMap.put(cinema.getId(), cinemaMpiCount);					}					add = true;				}			}			if(add){				int moviecount = mcpService.getCinemaMovieCountByDate(cinema.getId(), playdate);				int opicount = mcpService.getCinemaMpiCount(cinema.getId(), movieid, playdate);				openPlayItemCountMap.put(cinema.getId(), moviecount);				countMap.put(cinema.getId(), opicount);				Comparable sortValue = null;				if(StringUtils.equalsIgnoreCase(orderField, CINEMA_ORDER_MARK)){					Double point = Double.valueOf(getPlaceGeneralmark(cinema));					sortValue = point;				}else if(StringUtils.equalsIgnoreCase(orderField, CINEMA_ORDER_CLICKEDTIMES)){					sortValue = cinema.getClickedtimes();				}else if(StringUtils.equalsIgnoreCase(orderField, CINEMA_ORDER_DISTANCE) && pointx!=null && pointy!=null){					if(StringUtils.isNotBlank(cinema.getPointx()) && StringUtils.isNotBlank(cinema.getPointy())){						sortValue = Math.round(LongitudeAndLatitude.getDistance(pointx, pointy, Double.parseDouble(cinema.getPointx()), Double.parseDouble(cinema.getPointy())));					}				}else{					sortValue = countMap.get(cinema.getId());				}				sorter.addBean(sortValue, cinema);			}		}		if(CINEMA_ORDER_DISTANCE.equals(orderField)) return sorter.getAscResult();		return sorter.getDescResult();	}	private SearchCinemaCommand searchCinemaCommand(String specialfield){		SearchCinemaCommand cmd = new SearchCinemaCommand();		if(Flag.SERVICE_PARK.equals(specialfield)){			cmd.setPark(Flag.SERVICE_PARK);		}else if(Flag.SERVICE_VISACARD.equals(specialfield)){			cmd.setVisacard(Flag.SERVICE_VISACARD);		}else if(Flag.SERVICE_PAIRSEAT.equals(specialfield)){			cmd.setPairseat(Flag.SERVICE_PAIRSEAT);		}else if(Flag.SERVICE_IMAX.equals(specialfield)){			cmd.setImax(Flag.SERVICE_IMAX);		}else if(Flag.SERVICE_CHILD.equals(specialfield)){			cmd.setChild(Flag.SERVICE_CHILD);		}		return cmd;	}		private ErrorCode<List<Cinema>> setOrderFiled(List<Cinema> cinemaList,String orderField, Double pointx, Double pointy,String specialfield) {		OuterSorter sorter = new OuterSorter<Cinema>(false);		List<Cinema> cinemas = null;		if (CINEMA_ORDER_CLICKEDTIMES.equals(orderField)) {			for(Cinema cinema : cinemaList){				if(StringUtils.isBlank(specialfield) || (cinema.getOtherinfo() != null && cinema.getOtherinfo().indexOf(specialfield) != -1)){					sorter.addBean(cinema.getClickedtimes(), cinema);				}			}			cinemas = sorter.getDescResult();		} else if (CINEMA_ORDER_DISTANCE.equals(orderField)) {			if (pointx == null || pointy == null)				return ErrorCode.getFailure("参数有误！");			for (Cinema cinema : cinemaList) {				if(StringUtils.isBlank(specialfield) || (cinema.getOtherinfo() != null && cinema.getOtherinfo().indexOf(specialfield) != -1)){					if (StringUtils.isNotBlank(cinema.getPointx()) && StringUtils.isNotBlank(cinema.getPointy())) {						long value = Math.round(LongitudeAndLatitude.getDistance(pointx, pointy, Double.parseDouble(cinema.getPointx()), Double.parseDouble(cinema.getPointy())));						sorter.addBean(value, cinema);					}else{						sorter.addBean(null, cinema);					}				}			}			cinemas = sorter.getAscResult();		} else if (CINEMA_ORDER_MARK.equals(orderField)) {			for (Cinema cinema : cinemaList) {				if(StringUtils.isBlank(specialfield) || (cinema.getOtherinfo() != null && cinema.getOtherinfo().indexOf(specialfield) != -1)){					Integer generalmark = MarkHelper.getSingleMarkStar(cinema, "general");					sorter.addBean(generalmark, cinema);				}			}			cinemas = sorter.getDescResult();		}else {			cinemas = new ArrayList<Cinema>();			for(Cinema cinema : cinemaList){				if(StringUtils.isBlank(specialfield) || (cinema.getOtherinfo() != null && cinema.getOtherinfo().indexOf(specialfield) != -1)){					cinemas.add(cinema);				}			}		}		return ErrorCode.getSuccessReturn(cinemas);	}		private ErrorCode<Map<String,List<Cinema>>> getAllBookCinemaList(List<Long> cinemaIdList, List<Long> opiCinemaIdList,String specialfield,String orderField,Double pointx, Double pointy) {		List<Long> cinemasIdList = new ArrayList<Long>(cinemaIdList);		List<Long> curOpenList = new ArrayList<Long>(CollectionUtils.intersection(cinemasIdList, opiCinemaIdList));		List<Cinema> curOpenCinama = daoService.getObjectList(Cinema.class, curOpenList);		cinemasIdList.removeAll(curOpenList);		List<Cinema> curClostList  = daoService.getObjectList(Cinema.class, cinemasIdList);		ErrorCode<List<Cinema>> code = this.setOrderFiled(curOpenCinama, orderField, pointx, pointy, specialfield);		if(!code.isSuccess()){			return ErrorCode.getFailure("参数有误！");		}		curOpenCinama = code.getRetval();		ErrorCode<List<Cinema>> closeCode = this.setOrderFiled(curClostList, orderField, pointx, pointy, specialfield);		if(!closeCode.isSuccess()){			return ErrorCode.getFailure("参数有误！");		}		curClostList = closeCode.getRetval();		Map<String,List<Cinema>> cinemas = new HashMap<String,List<Cinema>>();		cinemas.put("curOpen", curOpenCinama);		cinemas.put("curClose", curClostList);		return ErrorCode.getSuccessReturn(cinemas);	}		/**	 * 根据影院影片和日期获取排片	 */	@RequestMapping("/api2/mobile/curMpiList.xhtml")	public String getCurMpiList(Long cinemaid, Long movieid, Date playdate, Integer from, Integer maxnum, ModelMap model) {		if (cinemaid == null || movieid == null)			return getErrorXmlView(model, ApiConstant.CODE_PARAM_ERROR, "传入参数有误！");		if(from==null)from=0;		if (playdate == null) playdate = new Date();		if(maxnum==null) maxnum = 50;		if (maxnum != null && maxnum >50) maxnum = 50;		List<MoviePlayItem> playItemList = mcpService.getCurMpiList(cinemaid, movieid, playdate);		if (!VmUtils.isEmptyList(playItemList)) {			playItemList = MoviePlayItem.getCurrent(playdate, playItemList);			if (from != null && maxnum != null){				playItemList = BeanUtil.getSubList(playItemList, from, maxnum);			}			ApiUser partner = NewApiAuthenticationFilter.getApiAuth().getApiUser();			Map<Long, OpenPlayItem> opiMap = new HashMap<Long, OpenPlayItem>();			Map<Long, String> reasonMap = new HashMap<Long, String>();			List<PartnerCloseRule> pcrList = partnerService.getCloseRuleList();			OpiFilter filter = new CloseRuleOpiFilter(partner, pcrList);			List<MoviePlayItem> unGewaMpiList = new ArrayList();			for (MoviePlayItem mpi : playItemList) {				OpenPlayItem opi=daoService.getObjectByUkey(OpenPlayItem.class, "mpid", mpi.getId(), true);				if(opi!=null && opi.getCostprice()!=null && !filter.excludeOpi(opi)) {					opiMap.put(mpi.getId(),opi);					String unreason = OpiConstant.getUnbookingReason(opi);					if(StringUtils.isBlank(unreason) && opi.hasOpentype(OpiConstant.OPEN_WD)){						unreason = "请下载格瓦拉@电影最新版选座购票";					}					reasonMap.put(mpi.getId(), unreason);				}else {					reasonMap.put(mpi.getId(), "该场次未开放售票");				}				if(mpi.isUnShowToGewa()) unGewaMpiList.add(mpi);			}			playItemList.removeAll(unGewaMpiList);			model.put("opiMap", opiMap);			model.put("reasonMap", reasonMap);			model.put("curMpiList", playItemList);		}		return getXmlView(model, "api2/movie/movie/curMpiList.vm");	}	/**	 * 根据场次id查询场次信息	 */	@RequestMapping("/api2/mobile/mpiDetail.xhtml")	public String getCurMpiList(Long mpid, ModelMap model) {		if (mpid == null) return getErrorXmlView(model, ApiConstant.CODE_PARAM_ERROR, "传入参数有误！");		MoviePlayItem mpi = daoService.getObject(MoviePlayItem.class, mpid);		if (mpi == null) return getErrorXmlView(model, ApiConstant.CODE_DATA_ERROR, "数据不存在！");		Map<Long, String> reasonMap = new HashMap<Long, String>();		Map<Long, Cinema> cinemaMap = new HashMap<Long, Cinema>();		Map<Long, Movie> movieMap = new HashMap<Long, Movie>();		OpenPlayItem opi=daoService.getObjectByUkey(OpenPlayItem.class, "mpid", mpi.getId(), true);		reasonMap.put(mpi.getId(), OpiConstant.getUnbookingReason(opi));		cinemaMap.put(mpi.getCinemaid(), daoService.getObject(Cinema.class, mpi.getCinemaid()));		movieMap.put(mpi.getMovieid(), daoService.getObject(Movie.class, mpi.getMovieid()));		model.put("opi", opi);		model.put("pItem", mpi);		model.put("movieMap", movieMap);		model.put("cinemaMap", cinemaMap);		model.put("reasonMap", reasonMap);		return getXmlView(model, "api2/movie/movie/mpiDetail.vm");	}	/**	 * 根据影院id获取当前影院放映的电影	 */	@RequestMapping("/api2/mobile/getMovieByCinemaId.xhtml")	public String getMovieByCinemaId(ModelMap model, Long cinemaid, Integer from, Integer maxnum) {		if (cinemaid == null) return getErrorXmlView(model, ApiConstant.CODE_PARAM_ERROR, "传入参数有误！");		Cinema cinema = daoService.getObject(Cinema.class, cinemaid);		if (cinema == null)			return getErrorXmlView(model, ApiConstant.CODE_DATA_ERROR, "影院不存在！");		List<Movie> list = mcpService.getCurMovieListByCinemaId(cinemaid);		List<Movie> openBookMovieList = mcpService.getOpenMovieList(cinema.getCitycode());		if (maxnum != null && maxnum > 30) maxnum = 10;		if (from == null || from <0) from = 0;		if (maxnum == null) maxnum = 50;		list = BeanUtil.getSubList(list, from, maxnum);		mcpService.sortTodayMoviesByMpiCount(cinema.getCitycode(), list);		List<Map> dataMap = BeanUtil.getBeanMapList(list, "id", "boughtcount","limg", "name", "englishname","generalmark", "length", "director", "actors", "releasedate","edition", "highlight");		String citycode = cinema.getCitycode();		Map<Long, Integer> cinemaCountMap=new HashMap<Long, Integer>();		Map<Long, Integer> playItemCountMap=new HashMap<Long, Integer>();		for(Map map : dataMap){			Long movieid = Long.valueOf(map.get("id")+"");			cinemaCountMap.put(movieid, mcpService.getPlayCinemaCount(citycode, movieid));			playItemCountMap.put(movieid, mcpService.getMovieCurMpiCount(citycode, movieid));		}				model.put("movieList", dataMap);		model.put("generalmarkMap", getGeneralmarkMap(new HashSet<BaseEntity>(list)));		model.put("openBookMovieList",BeanUtil.getBeanPropertyList(openBookMovieList, Long.class, "id", true));		model.put("cinemaCountMap", cinemaCountMap);		model.put("playItemCountMap", playItemCountMap);		return getXmlView(model, "api/mobile/movieList.vm");	}	/**	 * 根据影院id获取影院	 */	@RequestMapping("/api2/mobile/cinemaDetail.xhtml")	public String cinemaDetail(Long cinemaid, String memberEncode, ModelMap model) {		if (cinemaid == null)			return getErrorXmlView(model, ApiConstant.CODE_PARAM_ERROR, "传入参数有误！");		Cinema cinema = daoService.getObject(Cinema.class, cinemaid);		Treasure treasure = null;		if (StringUtils.isNotBlank(memberEncode)) {			Member member = memberService.getMemberByEncode(memberEncode);			if (member != null) {				treasure = treasureService.getTreasureByTagMemberidRelatedid(TagConstant.TAG_CINEMA, member.getId(), cinemaid, Treasure.ACTION_COLLECT);			} else				return getErrorXmlView(model, ApiConstant.CODE_DATA_ERROR, "用户不存在！");		}		List<Picture> pictureList = pictureService.getPictureListByRelatedid(TagConstant.TAG_CINEMA, cinemaid, 0, 1);		if(null!=pictureList&&pictureList.size()>0){			model.put("cinemaPicture", pictureList.get(0).getPicturename());		}		model.put("iscollect", treasure == null ? 0 : 1);		CinemaProfile cinemaProfile = daoService.getObject(CinemaProfile.class, cinema.getId());		if(null!=cinemaProfile){			if("Y".equals(cinemaProfile.getIsRefund())){				cinema.setOtherinfo(JsonUtils.addJsonKeyValue(cinema.getOtherinfo(), "refund", "放映前4小时可退票"));			}		}		Map map = BeanUtil.getBeanMapWithKey(cinema, false, "id", "name", "address", "transport", "contactphone", "booking", "feature", 				"limg", "pointx", "pointy", "otherinfo", "markStar", "stationname", "exitnumber");		Map<String, String> otherinfoMap = VmUtils.readJsonToMap(cinema.getOtherinfo());		//推荐放映厅		String rooms = otherinfoMap.get("roomList");		if(StringUtils.isNotBlank(rooms)){			String roomids[] = StringUtils.split(rooms, ",");			List<CinemaRoom> roomList = new ArrayList<CinemaRoom>();			for(String roomid : roomids){				roomList.add(daoService.getObject(CinemaRoom.class, Long.parseLong(roomid)));			}			model.put("roomList", roomList);		}		map.put("linename", cinema.getLineName(placeService.getSubwaylineMap(cinema.getCitycode())));		map.put("cinemaPoint", getPlaceGeneralmark(cinema));		model.put("cinema", map);		model.put("cinemaProfile",cinemaProfile);		return getXmlView(model, "api2/movie/cinema/cinemaDetail.vm");	}	/**	 * 当前影院播放该影片的排片日期列表(影院排片日期)	 */	@RequestMapping("/api2/mobile/openDateList.xhtml")	public String getMovieOfCinemaOpenDateList(Long cinemaid, Long movieid, String citycode, ModelMap model) {		ApiAuth auth = NewApiAuthenticationFilter.getApiAuth();		ApiUser partner = auth.getApiUser();		if (StringUtils.isNotBlank(citycode)) {			if (!partner.supportsCity(citycode))				return getErrorXmlView(model, ApiConstant.CODE_PARTNER_NORIGHTS, "不支持城市" + citycode);		} else {			citycode = partner.getDefaultCity();		}		if(movieid==null && cinemaid==null){			return getErrorXmlView(model, ApiConstant.CODE_DATA_ERROR, "请选择影院或影片！");		}		List<Date> dateList = null;		if(cinemaid == null){			dateList = mcpService.getCurMoviePlayDate2(citycode, movieid);		}else{			dateList = openPlayService.getMovieOfCinemaOpenDateList(cinemaid, movieid);		}		model.put("openDateList", dateList);		return getXmlView(model, "api/mobile/openDateList.vm");	}			/**	 * 抢票活动	 * @return	 */	@RequestMapping(value = "/api2/mobile/grabTicketEventList.xhtml")	public String grabTicketEventList(String citycode,ModelMap model){		DBObject params=new BasicDBObject();		//城市条件		if(StringUtils.isNotBlank(citycode)){			Pattern pattern = Pattern.compile(citycode,Pattern.CASE_INSENSITIVE);			params.put("citycode", pattern);		}		//状态不为关闭		params.put("status", new BasicDBObject("$ne", MobileGrabTicketEvent.GRAB_STATUS_C));		Map<String,List<OpenPlayItem>> mpiList=new HashMap<String, List<OpenPlayItem>>();		List<MobileGrabTicketEvent> eventList=mongoService.getObjectList(MobileGrabTicketEvent.class, params, "starttime", true, 0, 100);		Map<Long, Movie> movieMap=new HashMap<Long, Movie>();		for (MobileGrabTicketEvent event : eventList) {			DBObject paramsMpi=new BasicDBObject();			paramsMpi.put("gtid", event.getId());			List<OpenPlayItem> openPlayItemList=new ArrayList<OpenPlayItem>();			List<MobileGrabTicketMpi> list=mongoService.getObjectList(MobileGrabTicketMpi.class, paramsMpi);			for (MobileGrabTicketMpi mpi : list) {				OpenPlayItem openPlayItem=daoService.getObjectByUkey(OpenPlayItem.class, "mpid", mpi.getMpid(), true);				if(null!=openPlayItem){					openPlayItemList.add(openPlayItem);					movieMap.put(openPlayItem.getMpid(), daoService.getObjectByUkey(Movie.class, "id", openPlayItem.getMovieid(), true));				}			}			mpiList.put(event.getId(),openPlayItemList);		}		model.put("eventList", eventList);		model.put("mpiList", mpiList);		model.put("movieMap", movieMap);		return getXmlView(model, "api2/mobile/grabTicketEventList.vm");	}		/**	 * 根据区、放映日期、电影，获取电影院	 * @return	 */	@RequestMapping(value = "/api2/mobile/getOpenCinemaListByCountycode.xhtml")	public String getCinemaList(String countycode, Date playdate, Long movieid, ModelMap model){		List<Cinema> cinemaList = mcpService.getPlayCinemaListByCountycode(countycode, movieid, playdate);		if(cinemaList != null){			Map data = getGeneralmarkMap(new HashSet<BaseEntity>(cinemaList));			model.put("generalmarkMap", data);		}		model.put("cinemaList", cinemaList);		return getXmlView(model, "api2/movie/cinema/cinemaList.vm");	}	/**	 * 根据市、区、电影，获取排片日期	 * @return	 */	@RequestMapping(value = "/api2/mobile/getPlayDateInfoByCountyMovie.xhtml")	public String getPlayDateInfoByCountyMovie(String countycode, Long movieid, ModelMap model){		List<Date> playdateList = openPlayService.getMovieOpenDateListByCounycode(countycode, movieid);		model.put("openDateList", playdateList);		return getXmlView(model, "api/mobile/openDateList.vm");	}	/** 	 * 根据影片、所在城市、获取有购票的区域	 * @return	 */	@RequestMapping(value = "/api2/mobile/getCountyByOpenCinema.xhtml")	public String getCountyByOpenCinema(String citycode, Date playdate, Long movieid, ModelMap model){		Set<County> countyList = new HashSet<County>();		List<Long> cinemaidList = mcpService.getCurCinemaIdList(citycode, movieid, playdate);		for(Long cinemaid : cinemaidList){			Cinema cinema = daoService.getObject(Cinema.class, cinemaid);			County county = daoService.getObject(County.class, cinema.getCountycode());			countyList.add(county);		}		model.put("countyList", countyList);		return getXmlView(model, "api2/area/countyList.vm");	}}